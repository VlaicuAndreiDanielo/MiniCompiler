//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Computers/probleme C++/Proiect 2 -Compilator/Proiect 2 -Compilator/Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="RulesParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IRulesListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterProgram([NotNull] RulesParser.ProgramContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitProgram([NotNull] RulesParser.ProgramContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterDeclaration([NotNull] RulesParser.DeclarationContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitDeclaration([NotNull] RulesParser.DeclarationContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunction([NotNull] RulesParser.FunctionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunction([NotNull] RulesParser.FunctionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParameters([NotNull] RulesParser.ParametersContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParameters([NotNull] RulesParser.ParametersContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStatement([NotNull] RulesParser.StatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStatement([NotNull] RulesParser.StatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAssignment([NotNull] RulesParser.AssignmentContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAssignment([NotNull] RulesParser.AssignmentContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIfStatement([NotNull] RulesParser.IfStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIfStatement([NotNull] RulesParser.IfStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterForStatement([NotNull] RulesParser.ForStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitForStatement([NotNull] RulesParser.ForStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterWhileStatement([NotNull] RulesParser.WhileStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitWhileStatement([NotNull] RulesParser.WhileStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterReturnStatement([NotNull] RulesParser.ReturnStatementContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitReturnStatement([NotNull] RulesParser.ReturnStatementContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterStringExpression([NotNull] RulesParser.StringExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitStringExpression([NotNull] RulesParser.StringExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterNumberExpression([NotNull] RulesParser.NumberExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitNumberExpression([NotNull] RulesParser.NumberExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterArithmeticExpression([NotNull] RulesParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitArithmeticExpression([NotNull] RulesParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterIdentifierExpression([NotNull] RulesParser.IdentifierExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitIdentifierExpression([NotNull] RulesParser.IdentifierExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterType([NotNull] RulesParser.TypeContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitType([NotNull] RulesParser.TypeContext context);
}
