//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Computers/probleme C++/Proiect 2 -Compilator/Proiect 2 -Compilator/Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RulesParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, INT=2, FLOAT=3, DOUBLE=4, STRING_TYPE=5, VOID=6, BOOL=7, RETURN=8, 
		IF=9, ELSE=10, FOR=11, WHILE=12, STRUCT=13, NUMBER=14, BOOL_LITERAL=15, 
		IDENTIFIER=16, STRING=17, ARITH_OP=18, REL_OP=19, LOGIC_OP=20, LOGIC_OP_NEG=21, 
		ASSIGN_OP=22, ASSIGN_OP_COMPOUND=23, INCREMENT_OP=24, DECREMENT_OP=25, 
		PDESC=26, PINCH=27, ADESC=28, AINCH=29, PCTVIR=30, VIR=31, WS=32, COMMENT=33, 
		BLOCK_COMMENT=34, ERROR_CHAR=35;
	public const int
		RULE_declaration = 0, RULE_globalVariable = 1, RULE_program = 2, RULE_increment = 3, 
		RULE_decrement = 4, RULE_assignment = 5, RULE_function = 6, RULE_parameters = 7, 
		RULE_functionCall = 8, RULE_arguments = 9, RULE_structDefinition = 10, 
		RULE_constructor = 11, RULE_destructor = 12, RULE_structMember = 13, RULE_statement = 14, 
		RULE_compoundAssignment = 15, RULE_ifStatement = 16, RULE_forStatement = 17, 
		RULE_whileStatement = 18, RULE_returnStatement = 19, RULE_expression = 20, 
		RULE_type = 21;
	public static readonly string[] ruleNames = {
		"declaration", "globalVariable", "program", "increment", "decrement", 
		"assignment", "function", "parameters", "functionCall", "arguments", "structDefinition", 
		"constructor", "destructor", "structMember", "statement", "compoundAssignment", 
		"ifStatement", "forStatement", "whileStatement", "returnStatement", "expression", 
		"type"
	};

	private static readonly string[] _LiteralNames = {
		null, "'~'", "'int'", "'float'", "'double'", "'string'", "'void'", "'bool'", 
		"'return'", "'if'", "'else'", "'for'", "'while'", "'struct'", null, null, 
		null, null, null, null, null, "'!'", "'='", null, "'++'", "'--'", "'('", 
		"')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "INT", "FLOAT", "DOUBLE", "STRING_TYPE", "VOID", "BOOL", "RETURN", 
		"IF", "ELSE", "FOR", "WHILE", "STRUCT", "NUMBER", "BOOL_LITERAL", "IDENTIFIER", 
		"STRING", "ARITH_OP", "REL_OP", "LOGIC_OP", "LOGIC_OP_NEG", "ASSIGN_OP", 
		"ASSIGN_OP_COMPOUND", "INCREMENT_OP", "DECREMENT_OP", "PDESC", "PINCH", 
		"ADESC", "AINCH", "PCTVIR", "VIR", "WS", "COMMENT", "BLOCK_COMMENT", "ERROR_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RulesParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RulesParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class DeclarationContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(RulesParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public DeclarationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_declaration; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDeclaration(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DeclarationContext declaration() {
		DeclarationContext _localctx = new DeclarationContext(Context, State);
		EnterRule(_localctx, 0, RULE_declaration);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 44;
			type();
			State = 45;
			Match(IDENTIFIER);
			State = 48;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ASSIGN_OP) {
				{
				State = 46;
				Match(ASSIGN_OP);
				State = 47;
				expression(0);
				}
			}

			State = 50;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class GlobalVariableContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(RulesParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		public GlobalVariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_globalVariable; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitGlobalVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public GlobalVariableContext globalVariable() {
		GlobalVariableContext _localctx = new GlobalVariableContext(Context, State);
		EnterRule(_localctx, 2, RULE_globalVariable);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 52;
			type();
			State = 53;
			Match(IDENTIFIER);
			State = 54;
			Match(ASSIGN_OP);
			State = 55;
			expression(0);
			State = 56;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext[] globalVariable() {
			return GetRuleContexts<GlobalVariableContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public GlobalVariableContext globalVariable(int i) {
			return GetRuleContext<GlobalVariableContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext[] declaration() {
			return GetRuleContexts<DeclarationContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration(int i) {
			return GetRuleContext<DeclarationContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext[] function() {
			return GetRuleContexts<FunctionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function(int i) {
			return GetRuleContext<FunctionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext[] structDefinition() {
			return GetRuleContexts<StructDefinitionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructDefinitionContext structDefinition(int i) {
			return GetRuleContext<StructDefinitionContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitProgram(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 4, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 8444L) != 0)) {
				{
				State = 62;
				ErrorHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(TokenStream,1,Context) ) {
				case 1:
					{
					State = 58;
					globalVariable();
					}
					break;
				case 2:
					{
					State = 59;
					declaration();
					}
					break;
				case 3:
					{
					State = 60;
					function();
					}
					break;
				case 4:
					{
					State = 61;
					structDefinition();
					}
					break;
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IncrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INCREMENT_OP() { return GetToken(RulesParser.INCREMENT_OP, 0); }
		public IncrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_increment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIncrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IncrementContext increment() {
		IncrementContext _localctx = new IncrementContext(Context, State);
		EnterRule(_localctx, 6, RULE_increment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 71;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 67;
				Match(IDENTIFIER);
				State = 68;
				Match(INCREMENT_OP);
				}
				}
				break;
			case INCREMENT_OP:
				{
				{
				State = 69;
				Match(INCREMENT_OP);
				State = 70;
				Match(IDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 73;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DecrementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DECREMENT_OP() { return GetToken(RulesParser.DECREMENT_OP, 0); }
		public DecrementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_decrement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDecrement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DecrementContext decrement() {
		DecrementContext _localctx = new DecrementContext(Context, State);
		EnterRule(_localctx, 8, RULE_decrement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 79;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case IDENTIFIER:
				{
				{
				State = 75;
				Match(IDENTIFIER);
				State = 76;
				Match(DECREMENT_OP);
				}
				}
				break;
			case DECREMENT_OP:
				{
				{
				State = 77;
				Match(DECREMENT_OP);
				State = 78;
				Match(IDENTIFIER);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			State = 81;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP() { return GetToken(RulesParser.ASSIGN_OP, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 10, RULE_assignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 83;
			Match(IDENTIFIER);
			State = 84;
			Match(ASSIGN_OP);
			State = 87;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,5,Context) ) {
			case 1:
				{
				State = 85;
				expression(0);
				}
				break;
			case 2:
				{
				State = 86;
				functionCall();
				}
				break;
			}
			State = 89;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 12, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			type();
			State = 92;
			Match(IDENTIFIER);
			State = 93;
			Match(PDESC);
			State = 94;
			parameters();
			State = 95;
			Match(PINCH);
			State = 105;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case ADESC:
				{
				{
				State = 96;
				Match(ADESC);
				State = 100;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
					{
					{
					State = 97;
					statement();
					}
					}
					State = 102;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 103;
				Match(AINCH);
				}
				}
				break;
			case PCTVIR:
				{
				State = 104;
				Match(PCTVIR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParametersContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext[] type() {
			return GetRuleContexts<TypeContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(RulesParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RulesParser.IDENTIFIER, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(RulesParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(RulesParser.VIR, i);
		}
		public ParametersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parameters; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParameters(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ParametersContext parameters() {
		ParametersContext _localctx = new ParametersContext(Context, State);
		EnterRule(_localctx, 14, RULE_parameters);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 252L) != 0)) {
				{
				State = 107;
				type();
				State = 108;
				Match(IDENTIFIER);
				State = 115;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==VIR) {
					{
					{
					State = 109;
					Match(VIR);
					State = 110;
					type();
					State = 111;
					Match(IDENTIFIER);
					}
					}
					State = 117;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_functionCall; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(Context, State);
		EnterRule(_localctx, 16, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			Match(IDENTIFIER);
			State = 121;
			Match(PDESC);
			State = 123;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69451776L) != 0)) {
				{
				State = 122;
				arguments();
				}
			}

			State = 125;
			Match(PINCH);
			State = 127;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,11,Context) ) {
			case 1:
				{
				State = 126;
				Match(PCTVIR);
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] VIR() { return GetTokens(RulesParser.VIR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VIR(int i) {
			return GetToken(RulesParser.VIR, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 18, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 129;
			expression(0);
			State = 134;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==VIR) {
				{
				{
				State = 130;
				Match(VIR);
				State = 131;
				expression(0);
				}
				}
				State = 136;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructDefinitionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(RulesParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext[] structMember() {
			return GetRuleContexts<StructMemberContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StructMemberContext structMember(int i) {
			return GetRuleContext<StructMemberContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		public StructDefinitionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structDefinition; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructDefinition(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructDefinitionContext structDefinition() {
		StructDefinitionContext _localctx = new StructDefinitionContext(Context, State);
		EnterRule(_localctx, 20, RULE_structDefinition);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 137;
			Match(STRUCT);
			State = 138;
			Match(IDENTIFIER);
			State = 139;
			Match(ADESC);
			State = 143;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 65790L) != 0)) {
				{
				{
				State = 140;
				structMember();
				}
				}
				State = 145;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 146;
			Match(AINCH);
			State = 148;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PCTVIR) {
				{
				State = 147;
				Match(PCTVIR);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ParametersContext parameters() {
			return GetRuleContext<ParametersContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ConstructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitConstructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ConstructorContext constructor() {
		ConstructorContext _localctx = new ConstructorContext(Context, State);
		EnterRule(_localctx, 22, RULE_constructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 150;
			Match(IDENTIFIER);
			{
			State = 151;
			Match(PDESC);
			State = 152;
			parameters();
			State = 153;
			Match(PINCH);
			}
			State = 166;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING_TYPE:
			case VOID:
			case BOOL:
			case IDENTIFIER:
			case ADESC:
			case AINCH:
				{
				State = 163;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADESC) {
					{
					State = 155;
					Match(ADESC);
					State = 159;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
						{
						{
						State = 156;
						statement();
						}
						}
						State = 161;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 162;
					Match(AINCH);
					}
				}

				}
				break;
			case PCTVIR:
				{
				State = 165;
				Match(PCTVIR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class DestructorContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public DestructorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_destructor; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitDestructor(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public DestructorContext destructor() {
		DestructorContext _localctx = new DestructorContext(Context, State);
		EnterRule(_localctx, 24, RULE_destructor);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 168;
			Match(T__0);
			State = 169;
			Match(IDENTIFIER);
			State = 170;
			Match(PDESC);
			State = 171;
			Match(PINCH);
			State = 183;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__0:
			case INT:
			case FLOAT:
			case DOUBLE:
			case STRING_TYPE:
			case VOID:
			case BOOL:
			case IDENTIFIER:
			case ADESC:
			case AINCH:
				{
				State = 180;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if (_la==ADESC) {
					{
					State = 172;
					Match(ADESC);
					State = 176;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
					while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
						{
						{
						State = 173;
						statement();
						}
						}
						State = 178;
						ErrorHandler.Sync(this);
						_la = TokenStream.LA(1);
					}
					State = 179;
					Match(AINCH);
					}
				}

				}
				break;
			case PCTVIR:
				{
				State = 182;
				Match(PCTVIR);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StructMemberContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ConstructorContext constructor() {
			return GetRuleContext<ConstructorContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DestructorContext destructor() {
			return GetRuleContext<DestructorContext>(0);
		}
		public StructMemberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_structMember; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStructMember(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StructMemberContext structMember() {
		StructMemberContext _localctx = new StructMemberContext(Context, State);
		EnterRule(_localctx, 26, RULE_structMember);
		try {
			State = 189;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,21,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 185;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 186;
				function();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 187;
				constructor();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 188;
				destructor();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public DeclarationContext declaration() {
			return GetRuleContext<DeclarationContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public IfStatementContext ifStatement() {
			return GetRuleContext<IfStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ForStatementContext forStatement() {
			return GetRuleContext<ForStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public WhileStatementContext whileStatement() {
			return GetRuleContext<WhileStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ReturnStatementContext returnStatement() {
			return GetRuleContext<ReturnStatementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public CompoundAssignmentContext compoundAssignment() {
			return GetRuleContext<CompoundAssignmentContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 28, RULE_statement);
		try {
			State = 201;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,22,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 191;
				declaration();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 192;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 193;
				increment();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 194;
				decrement();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 195;
				functionCall();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 196;
				ifStatement();
				}
				break;
			case 7:
				EnterOuterAlt(_localctx, 7);
				{
				State = 197;
				forStatement();
				}
				break;
			case 8:
				EnterOuterAlt(_localctx, 8);
				{
				State = 198;
				whileStatement();
				}
				break;
			case 9:
				EnterOuterAlt(_localctx, 9);
				{
				State = 199;
				returnStatement();
				}
				break;
			case 10:
				EnterOuterAlt(_localctx, 10);
				{
				State = 200;
				compoundAssignment();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CompoundAssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ASSIGN_OP_COMPOUND() { return GetToken(RulesParser.ASSIGN_OP_COMPOUND, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		public CompoundAssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_compoundAssignment; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCompoundAssignment(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CompoundAssignmentContext compoundAssignment() {
		CompoundAssignmentContext _localctx = new CompoundAssignmentContext(Context, State);
		EnterRule(_localctx, 30, RULE_compoundAssignment);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 203;
			Match(IDENTIFIER);
			State = 204;
			Match(ASSIGN_OP_COMPOUND);
			State = 205;
			expression(0);
			State = 206;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IfStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RulesParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ADESC() { return GetTokens(RulesParser.ADESC); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC(int i) {
			return GetToken(RulesParser.ADESC, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] AINCH() { return GetTokens(RulesParser.AINCH); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH(int i) {
			return GetToken(RulesParser.AINCH, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RulesParser.ELSE, 0); }
		public IfStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_ifStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIfStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IfStatementContext ifStatement() {
		IfStatementContext _localctx = new IfStatementContext(Context, State);
		EnterRule(_localctx, 32, RULE_ifStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 208;
			Match(IF);
			State = 209;
			expression(0);
			State = 210;
			Match(ADESC);
			State = 214;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
				{
				{
				State = 211;
				statement();
				}
				}
				State = 216;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 217;
			Match(AINCH);
			State = 227;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 218;
				Match(ELSE);
				State = 219;
				Match(ADESC);
				State = 223;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
					{
					{
					State = 220;
					statement();
					}
					}
					State = 225;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				State = 226;
				Match(AINCH);
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ForStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(RulesParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext[] assignment() {
			return GetRuleContexts<AssignmentContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment(int i) {
			return GetRuleContext<AssignmentContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public IncrementContext increment() {
			return GetRuleContext<IncrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public DecrementContext decrement() {
			return GetRuleContext<DecrementContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public ForStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_forStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitForStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ForStatementContext forStatement() {
		ForStatementContext _localctx = new ForStatementContext(Context, State);
		EnterRule(_localctx, 34, RULE_forStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 229;
			Match(FOR);
			State = 230;
			Match(PDESC);
			State = 231;
			assignment();
			State = 232;
			expression(0);
			State = 233;
			Match(PCTVIR);
			State = 237;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,26,Context) ) {
			case 1:
				{
				State = 234;
				assignment();
				}
				break;
			case 2:
				{
				State = 235;
				increment();
				}
				break;
			case 3:
				{
				State = 236;
				decrement();
				}
				break;
			}
			State = 239;
			Match(PINCH);
			State = 240;
			Match(ADESC);
			State = 244;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
				{
				{
				State = 241;
				statement();
				}
				}
				State = 246;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 247;
			Match(AINCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class WhileStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WHILE() { return GetToken(RulesParser.WHILE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ADESC() { return GetToken(RulesParser.ADESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode AINCH() { return GetToken(RulesParser.AINCH, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public WhileStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_whileStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitWhileStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public WhileStatementContext whileStatement() {
		WhileStatementContext _localctx = new WhileStatementContext(Context, State);
		EnterRule(_localctx, 36, RULE_whileStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(WHILE);
			State = 250;
			expression(0);
			State = 251;
			Match(ADESC);
			State = 255;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 50404348L) != 0)) {
				{
				{
				State = 252;
				statement();
				}
				}
				State = 257;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 258;
			Match(AINCH);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ReturnStatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RulesParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PCTVIR() { return GetToken(RulesParser.PCTVIR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ReturnStatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_returnStatement; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitReturnStatement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ReturnStatementContext returnStatement() {
		ReturnStatementContext _localctx = new ReturnStatementContext(Context, State);
		EnterRule(_localctx, 38, RULE_returnStatement);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 260;
			Match(RETURN);
			State = 262;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 69451776L) != 0)) {
				{
				State = 261;
				expression(0);
				}
			}

			State = 264;
			Match(PCTVIR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class RelationalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode REL_OP() { return GetToken(RulesParser.REL_OP, 0); }
		public RelationalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRelationalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_OP() { return GetToken(RulesParser.LOGIC_OP, 0); }
		public LogicalExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class BoolAssignmentExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL_LITERAL() { return GetToken(RulesParser.BOOL_LITERAL, 0); }
		public BoolAssignmentExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitBoolAssignmentExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PDESC() { return GetToken(RulesParser.PDESC, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PINCH() { return GetToken(RulesParser.PINCH, 0); }
		public ParenthesisExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class StringExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RulesParser.STRING, 0); }
		public StringExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitStringExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class NumberExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RulesParser.NUMBER, 0); }
		public NumberExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumberExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class LogicalNegationExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LOGIC_OP_NEG() { return GetToken(RulesParser.LOGIC_OP_NEG, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public LogicalNegationExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitLogicalNegationExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ArithmeticExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ARITH_OP() { return GetToken(RulesParser.ARITH_OP, 0); }
		public ArithmeticExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArithmeticExpression(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IdentifierExpressionContext : ExpressionContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RulesParser.IDENTIFIER, 0); }
		public IdentifierExpressionContext(ExpressionContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdentifierExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 40;
		EnterRecursionRule(_localctx, 40, RULE_expression, _p);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 277;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case LOGIC_OP_NEG:
				{
				_localctx = new LogicalNegationExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;

				State = 267;
				Match(LOGIC_OP_NEG);
				State = 268;
				expression(6);
				}
				break;
			case BOOL_LITERAL:
				{
				_localctx = new BoolAssignmentExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				{
				State = 269;
				Match(BOOL_LITERAL);
				}
				}
				break;
			case IDENTIFIER:
				{
				_localctx = new IdentifierExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 270;
				Match(IDENTIFIER);
				}
				break;
			case NUMBER:
				{
				_localctx = new NumberExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 271;
				Match(NUMBER);
				}
				break;
			case STRING:
				{
				_localctx = new StringExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 272;
				Match(STRING);
				}
				break;
			case PDESC:
				{
				_localctx = new ParenthesisExpressionContext(_localctx);
				Context = _localctx;
				_prevctx = _localctx;
				State = 273;
				Match(PDESC);
				State = 274;
				expression(0);
				State = 275;
				Match(PINCH);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 290;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 288;
					ErrorHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(TokenStream,31,Context) ) {
					case 1:
						{
						_localctx = new ArithmeticExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 279;
						if (!(Precpred(Context, 9))) throw new FailedPredicateException(this, "Precpred(Context, 9)");
						State = 280;
						Match(ARITH_OP);
						State = 281;
						expression(10);
						}
						break;
					case 2:
						{
						_localctx = new RelationalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 282;
						if (!(Precpred(Context, 8))) throw new FailedPredicateException(this, "Precpred(Context, 8)");
						State = 283;
						Match(REL_OP);
						State = 284;
						expression(9);
						}
						break;
					case 3:
						{
						_localctx = new LogicalExpressionContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 285;
						if (!(Precpred(Context, 7))) throw new FailedPredicateException(this, "Precpred(Context, 7)");
						State = 286;
						Match(LOGIC_OP);
						State = 287;
						expression(8);
						}
						break;
					}
					} 
				}
				State = 292;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,32,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode INT() { return GetToken(RulesParser.INT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FLOAT() { return GetToken(RulesParser.FLOAT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode DOUBLE() { return GetToken(RulesParser.DOUBLE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING_TYPE() { return GetToken(RulesParser.STRING_TYPE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode VOID() { return GetToken(RulesParser.VOID, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RulesParser.BOOL, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IRulesVisitor<TResult> typedVisitor = visitor as IRulesVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 42, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 293;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 252L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 20: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 9);
		case 1: return Precpred(Context, 8);
		case 2: return Precpred(Context, 7);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,35,296,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		1,0,1,0,1,0,1,0,3,0,49,8,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
		1,2,5,2,63,8,2,10,2,12,2,66,9,2,1,3,1,3,1,3,1,3,3,3,72,8,3,1,3,1,3,1,4,
		1,4,1,4,1,4,3,4,80,8,4,1,4,1,4,1,5,1,5,1,5,1,5,3,5,88,8,5,1,5,1,5,1,6,
		1,6,1,6,1,6,1,6,1,6,1,6,5,6,99,8,6,10,6,12,6,102,9,6,1,6,1,6,3,6,106,8,
		6,1,7,1,7,1,7,1,7,1,7,1,7,5,7,114,8,7,10,7,12,7,117,9,7,3,7,119,8,7,1,
		8,1,8,1,8,3,8,124,8,8,1,8,1,8,3,8,128,8,8,1,9,1,9,1,9,5,9,133,8,9,10,9,
		12,9,136,9,9,1,10,1,10,1,10,1,10,5,10,142,8,10,10,10,12,10,145,9,10,1,
		10,1,10,3,10,149,8,10,1,11,1,11,1,11,1,11,1,11,1,11,1,11,5,11,158,8,11,
		10,11,12,11,161,9,11,1,11,3,11,164,8,11,1,11,3,11,167,8,11,1,12,1,12,1,
		12,1,12,1,12,1,12,5,12,175,8,12,10,12,12,12,178,9,12,1,12,3,12,181,8,12,
		1,12,3,12,184,8,12,1,13,1,13,1,13,1,13,3,13,190,8,13,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,1,14,1,14,1,14,3,14,202,8,14,1,15,1,15,1,15,1,15,1,15,
		1,16,1,16,1,16,1,16,5,16,213,8,16,10,16,12,16,216,9,16,1,16,1,16,1,16,
		1,16,5,16,222,8,16,10,16,12,16,225,9,16,1,16,3,16,228,8,16,1,17,1,17,1,
		17,1,17,1,17,1,17,1,17,1,17,3,17,238,8,17,1,17,1,17,1,17,5,17,243,8,17,
		10,17,12,17,246,9,17,1,17,1,17,1,18,1,18,1,18,1,18,5,18,254,8,18,10,18,
		12,18,257,9,18,1,18,1,18,1,19,1,19,3,19,263,8,19,1,19,1,19,1,20,1,20,1,
		20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,1,20,3,20,278,8,20,1,20,1,20,1,20,
		1,20,1,20,1,20,1,20,1,20,1,20,5,20,289,8,20,10,20,12,20,292,9,20,1,21,
		1,21,1,21,0,1,40,22,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,
		38,40,42,0,1,1,0,2,7,324,0,44,1,0,0,0,2,52,1,0,0,0,4,64,1,0,0,0,6,71,1,
		0,0,0,8,79,1,0,0,0,10,83,1,0,0,0,12,91,1,0,0,0,14,118,1,0,0,0,16,120,1,
		0,0,0,18,129,1,0,0,0,20,137,1,0,0,0,22,150,1,0,0,0,24,168,1,0,0,0,26,189,
		1,0,0,0,28,201,1,0,0,0,30,203,1,0,0,0,32,208,1,0,0,0,34,229,1,0,0,0,36,
		249,1,0,0,0,38,260,1,0,0,0,40,277,1,0,0,0,42,293,1,0,0,0,44,45,3,42,21,
		0,45,48,5,16,0,0,46,47,5,22,0,0,47,49,3,40,20,0,48,46,1,0,0,0,48,49,1,
		0,0,0,49,50,1,0,0,0,50,51,5,30,0,0,51,1,1,0,0,0,52,53,3,42,21,0,53,54,
		5,16,0,0,54,55,5,22,0,0,55,56,3,40,20,0,56,57,5,30,0,0,57,3,1,0,0,0,58,
		63,3,2,1,0,59,63,3,0,0,0,60,63,3,12,6,0,61,63,3,20,10,0,62,58,1,0,0,0,
		62,59,1,0,0,0,62,60,1,0,0,0,62,61,1,0,0,0,63,66,1,0,0,0,64,62,1,0,0,0,
		64,65,1,0,0,0,65,5,1,0,0,0,66,64,1,0,0,0,67,68,5,16,0,0,68,72,5,24,0,0,
		69,70,5,24,0,0,70,72,5,16,0,0,71,67,1,0,0,0,71,69,1,0,0,0,72,73,1,0,0,
		0,73,74,5,30,0,0,74,7,1,0,0,0,75,76,5,16,0,0,76,80,5,25,0,0,77,78,5,25,
		0,0,78,80,5,16,0,0,79,75,1,0,0,0,79,77,1,0,0,0,80,81,1,0,0,0,81,82,5,30,
		0,0,82,9,1,0,0,0,83,84,5,16,0,0,84,87,5,22,0,0,85,88,3,40,20,0,86,88,3,
		16,8,0,87,85,1,0,0,0,87,86,1,0,0,0,88,89,1,0,0,0,89,90,5,30,0,0,90,11,
		1,0,0,0,91,92,3,42,21,0,92,93,5,16,0,0,93,94,5,26,0,0,94,95,3,14,7,0,95,
		105,5,27,0,0,96,100,5,28,0,0,97,99,3,28,14,0,98,97,1,0,0,0,99,102,1,0,
		0,0,100,98,1,0,0,0,100,101,1,0,0,0,101,103,1,0,0,0,102,100,1,0,0,0,103,
		106,5,29,0,0,104,106,5,30,0,0,105,96,1,0,0,0,105,104,1,0,0,0,106,13,1,
		0,0,0,107,108,3,42,21,0,108,115,5,16,0,0,109,110,5,31,0,0,110,111,3,42,
		21,0,111,112,5,16,0,0,112,114,1,0,0,0,113,109,1,0,0,0,114,117,1,0,0,0,
		115,113,1,0,0,0,115,116,1,0,0,0,116,119,1,0,0,0,117,115,1,0,0,0,118,107,
		1,0,0,0,118,119,1,0,0,0,119,15,1,0,0,0,120,121,5,16,0,0,121,123,5,26,0,
		0,122,124,3,18,9,0,123,122,1,0,0,0,123,124,1,0,0,0,124,125,1,0,0,0,125,
		127,5,27,0,0,126,128,5,30,0,0,127,126,1,0,0,0,127,128,1,0,0,0,128,17,1,
		0,0,0,129,134,3,40,20,0,130,131,5,31,0,0,131,133,3,40,20,0,132,130,1,0,
		0,0,133,136,1,0,0,0,134,132,1,0,0,0,134,135,1,0,0,0,135,19,1,0,0,0,136,
		134,1,0,0,0,137,138,5,13,0,0,138,139,5,16,0,0,139,143,5,28,0,0,140,142,
		3,26,13,0,141,140,1,0,0,0,142,145,1,0,0,0,143,141,1,0,0,0,143,144,1,0,
		0,0,144,146,1,0,0,0,145,143,1,0,0,0,146,148,5,29,0,0,147,149,5,30,0,0,
		148,147,1,0,0,0,148,149,1,0,0,0,149,21,1,0,0,0,150,151,5,16,0,0,151,152,
		5,26,0,0,152,153,3,14,7,0,153,154,5,27,0,0,154,166,1,0,0,0,155,159,5,28,
		0,0,156,158,3,28,14,0,157,156,1,0,0,0,158,161,1,0,0,0,159,157,1,0,0,0,
		159,160,1,0,0,0,160,162,1,0,0,0,161,159,1,0,0,0,162,164,5,29,0,0,163,155,
		1,0,0,0,163,164,1,0,0,0,164,167,1,0,0,0,165,167,5,30,0,0,166,163,1,0,0,
		0,166,165,1,0,0,0,167,23,1,0,0,0,168,169,5,1,0,0,169,170,5,16,0,0,170,
		171,5,26,0,0,171,183,5,27,0,0,172,176,5,28,0,0,173,175,3,28,14,0,174,173,
		1,0,0,0,175,178,1,0,0,0,176,174,1,0,0,0,176,177,1,0,0,0,177,179,1,0,0,
		0,178,176,1,0,0,0,179,181,5,29,0,0,180,172,1,0,0,0,180,181,1,0,0,0,181,
		184,1,0,0,0,182,184,5,30,0,0,183,180,1,0,0,0,183,182,1,0,0,0,184,25,1,
		0,0,0,185,190,3,0,0,0,186,190,3,12,6,0,187,190,3,22,11,0,188,190,3,24,
		12,0,189,185,1,0,0,0,189,186,1,0,0,0,189,187,1,0,0,0,189,188,1,0,0,0,190,
		27,1,0,0,0,191,202,3,0,0,0,192,202,3,10,5,0,193,202,3,6,3,0,194,202,3,
		8,4,0,195,202,3,16,8,0,196,202,3,32,16,0,197,202,3,34,17,0,198,202,3,36,
		18,0,199,202,3,38,19,0,200,202,3,30,15,0,201,191,1,0,0,0,201,192,1,0,0,
		0,201,193,1,0,0,0,201,194,1,0,0,0,201,195,1,0,0,0,201,196,1,0,0,0,201,
		197,1,0,0,0,201,198,1,0,0,0,201,199,1,0,0,0,201,200,1,0,0,0,202,29,1,0,
		0,0,203,204,5,16,0,0,204,205,5,23,0,0,205,206,3,40,20,0,206,207,5,30,0,
		0,207,31,1,0,0,0,208,209,5,9,0,0,209,210,3,40,20,0,210,214,5,28,0,0,211,
		213,3,28,14,0,212,211,1,0,0,0,213,216,1,0,0,0,214,212,1,0,0,0,214,215,
		1,0,0,0,215,217,1,0,0,0,216,214,1,0,0,0,217,227,5,29,0,0,218,219,5,10,
		0,0,219,223,5,28,0,0,220,222,3,28,14,0,221,220,1,0,0,0,222,225,1,0,0,0,
		223,221,1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,223,1,0,0,0,226,228,
		5,29,0,0,227,218,1,0,0,0,227,228,1,0,0,0,228,33,1,0,0,0,229,230,5,11,0,
		0,230,231,5,26,0,0,231,232,3,10,5,0,232,233,3,40,20,0,233,237,5,30,0,0,
		234,238,3,10,5,0,235,238,3,6,3,0,236,238,3,8,4,0,237,234,1,0,0,0,237,235,
		1,0,0,0,237,236,1,0,0,0,238,239,1,0,0,0,239,240,5,27,0,0,240,244,5,28,
		0,0,241,243,3,28,14,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,
		244,245,1,0,0,0,245,247,1,0,0,0,246,244,1,0,0,0,247,248,5,29,0,0,248,35,
		1,0,0,0,249,250,5,12,0,0,250,251,3,40,20,0,251,255,5,28,0,0,252,254,3,
		28,14,0,253,252,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,256,1,0,0,
		0,256,258,1,0,0,0,257,255,1,0,0,0,258,259,5,29,0,0,259,37,1,0,0,0,260,
		262,5,8,0,0,261,263,3,40,20,0,262,261,1,0,0,0,262,263,1,0,0,0,263,264,
		1,0,0,0,264,265,5,30,0,0,265,39,1,0,0,0,266,267,6,20,-1,0,267,268,5,21,
		0,0,268,278,3,40,20,6,269,278,5,15,0,0,270,278,5,16,0,0,271,278,5,14,0,
		0,272,278,5,17,0,0,273,274,5,26,0,0,274,275,3,40,20,0,275,276,5,27,0,0,
		276,278,1,0,0,0,277,266,1,0,0,0,277,269,1,0,0,0,277,270,1,0,0,0,277,271,
		1,0,0,0,277,272,1,0,0,0,277,273,1,0,0,0,278,290,1,0,0,0,279,280,10,9,0,
		0,280,281,5,18,0,0,281,289,3,40,20,10,282,283,10,8,0,0,283,284,5,19,0,
		0,284,289,3,40,20,9,285,286,10,7,0,0,286,287,5,20,0,0,287,289,3,40,20,
		8,288,279,1,0,0,0,288,282,1,0,0,0,288,285,1,0,0,0,289,292,1,0,0,0,290,
		288,1,0,0,0,290,291,1,0,0,0,291,41,1,0,0,0,292,290,1,0,0,0,293,294,7,0,
		0,0,294,43,1,0,0,0,33,48,62,64,71,79,87,100,105,115,118,123,127,134,143,
		148,159,163,166,176,180,183,189,201,214,223,227,237,244,255,262,277,288,
		290
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
