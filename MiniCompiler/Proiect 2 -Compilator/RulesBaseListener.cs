//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Computers/probleme C++/Proiect 2 -Compilator/Proiect 2 -Compilator/Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419


using Antlr4.Runtime.Misc;
using IErrorNode = Antlr4.Runtime.Tree.IErrorNode;
using ITerminalNode = Antlr4.Runtime.Tree.ITerminalNode;
using IToken = Antlr4.Runtime.IToken;
using ParserRuleContext = Antlr4.Runtime.ParserRuleContext;

/// <summary>
/// This class provides an empty implementation of <see cref="IRulesListener"/>,
/// which can be extended to create a listener which only needs to handle a subset
/// of the available methods.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.Diagnostics.DebuggerNonUserCode]
[System.CLSCompliant(false)]
public partial class RulesBaseListener : IRulesListener {
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterProgram([NotNull] RulesParser.ProgramContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.program"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitProgram([NotNull] RulesParser.ProgramContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterDeclaration([NotNull] RulesParser.DeclarationContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.declaration"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitDeclaration([NotNull] RulesParser.DeclarationContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterFunction([NotNull] RulesParser.FunctionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.function"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitFunction([NotNull] RulesParser.FunctionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterParameters([NotNull] RulesParser.ParametersContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.parameters"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitParameters([NotNull] RulesParser.ParametersContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStatement([NotNull] RulesParser.StatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.statement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStatement([NotNull] RulesParser.StatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterAssignment([NotNull] RulesParser.AssignmentContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.assignment"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitAssignment([NotNull] RulesParser.AssignmentContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIfStatement([NotNull] RulesParser.IfStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.ifStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIfStatement([NotNull] RulesParser.IfStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterForStatement([NotNull] RulesParser.ForStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.forStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitForStatement([NotNull] RulesParser.ForStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterWhileStatement([NotNull] RulesParser.WhileStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.whileStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitWhileStatement([NotNull] RulesParser.WhileStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterReturnStatement([NotNull] RulesParser.ReturnStatementContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.returnStatement"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitReturnStatement([NotNull] RulesParser.ReturnStatementContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterStringExpression([NotNull] RulesParser.StringExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitStringExpression([NotNull] RulesParser.StringExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterNumberExpression([NotNull] RulesParser.NumberExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitNumberExpression([NotNull] RulesParser.NumberExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterArithmeticExpression([NotNull] RulesParser.ArithmeticExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitArithmeticExpression([NotNull] RulesParser.ArithmeticExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterIdentifierExpression([NotNull] RulesParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Exit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitIdentifierExpression([NotNull] RulesParser.IdentifierExpressionContext context) { }
	/// <summary>
	/// Enter a parse tree produced by <see cref="RulesParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void EnterType([NotNull] RulesParser.TypeContext context) { }
	/// <summary>
	/// Exit a parse tree produced by <see cref="RulesParser.type"/>.
	/// <para>The default implementation does nothing.</para>
	/// </summary>
	/// <param name="context">The parse tree.</param>
	public virtual void ExitType([NotNull] RulesParser.TypeContext context) { }

	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void EnterEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void ExitEveryRule([NotNull] ParserRuleContext context) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitTerminal([NotNull] ITerminalNode node) { }
	/// <inheritdoc/>
	/// <remarks>The default implementation does nothing.</remarks>
	public virtual void VisitErrorNode([NotNull] IErrorNode node) { }
}
