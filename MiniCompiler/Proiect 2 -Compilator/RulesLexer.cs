//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Computers/probleme C++/Proiect 2 -Compilator/Proiect 2 -Compilator/Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RulesLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, INT=2, FLOAT=3, DOUBLE=4, STRING_TYPE=5, VOID=6, BOOL=7, RETURN=8, 
		IF=9, ELSE=10, FOR=11, WHILE=12, STRUCT=13, NUMBER=14, BOOL_LITERAL=15, 
		IDENTIFIER=16, STRING=17, ARITH_OP=18, REL_OP=19, LOGIC_OP=20, LOGIC_OP_NEG=21, 
		ASSIGN_OP=22, ASSIGN_OP_COMPOUND=23, INCREMENT_OP=24, DECREMENT_OP=25, 
		PDESC=26, PINCH=27, ADESC=28, AINCH=29, PCTVIR=30, VIR=31, WS=32, COMMENT=33, 
		BLOCK_COMMENT=34, ERROR_CHAR=35;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"T__0", "INT", "FLOAT", "DOUBLE", "STRING_TYPE", "VOID", "BOOL", "RETURN", 
		"IF", "ELSE", "FOR", "WHILE", "STRUCT", "NUMBER", "BOOL_LITERAL", "IDENTIFIER", 
		"STRING", "ARITH_OP", "REL_OP", "LOGIC_OP", "LOGIC_OP_NEG", "ASSIGN_OP", 
		"ASSIGN_OP_COMPOUND", "INCREMENT_OP", "DECREMENT_OP", "PDESC", "PINCH", 
		"ADESC", "AINCH", "PCTVIR", "VIR", "WS", "COMMENT", "BLOCK_COMMENT", "ERROR_CHAR"
	};


	public RulesLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public RulesLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "'~'", "'int'", "'float'", "'double'", "'string'", "'void'", "'bool'", 
		"'return'", "'if'", "'else'", "'for'", "'while'", "'struct'", null, null, 
		null, null, null, null, null, "'!'", "'='", null, "'++'", "'--'", "'('", 
		"')'", "'{'", "'}'", "';'", "','"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, "INT", "FLOAT", "DOUBLE", "STRING_TYPE", "VOID", "BOOL", "RETURN", 
		"IF", "ELSE", "FOR", "WHILE", "STRUCT", "NUMBER", "BOOL_LITERAL", "IDENTIFIER", 
		"STRING", "ARITH_OP", "REL_OP", "LOGIC_OP", "LOGIC_OP_NEG", "ASSIGN_OP", 
		"ASSIGN_OP_COMPOUND", "INCREMENT_OP", "DECREMENT_OP", "PDESC", "PINCH", 
		"ADESC", "AINCH", "PCTVIR", "VIR", "WS", "COMMENT", "BLOCK_COMMENT", "ERROR_CHAR"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Rules.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RulesLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,35,270,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,
		6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
		7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
		7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
		7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,1,0,1,
		0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,
		1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,
		7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,
		10,1,10,1,11,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,
		12,1,13,3,13,141,8,13,1,13,4,13,144,8,13,11,13,12,13,145,1,13,1,13,4,13,
		150,8,13,11,13,12,13,151,3,13,154,8,13,1,14,1,14,1,14,1,14,1,14,1,14,1,
		14,1,14,1,14,1,14,3,14,166,8,14,1,15,1,15,5,15,170,8,15,10,15,12,15,173,
		9,15,1,16,1,16,5,16,177,8,16,10,16,12,16,180,9,16,1,16,1,16,1,17,1,17,
		1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,3,18,195,8,18,1,19,1,19,1,
		19,1,19,3,19,201,8,19,1,20,1,20,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,
		1,22,1,22,1,22,1,22,3,22,217,8,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,
		25,1,26,1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,4,31,238,8,31,
		11,31,12,31,239,1,31,1,31,1,32,1,32,1,32,1,32,5,32,248,8,32,10,32,12,32,
		251,9,32,1,32,1,32,1,33,1,33,1,33,1,33,5,33,259,8,33,10,33,12,33,262,9,
		33,1,33,1,33,1,33,1,33,1,33,1,34,1,34,2,178,260,0,35,1,1,3,2,5,3,7,4,9,
		5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,
		35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
		59,30,61,31,63,32,65,33,67,34,69,35,1,0,8,2,0,43,43,45,45,1,0,48,57,3,
		0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,4,0,37,37,42,43,45,45,
		47,47,2,0,60,60,62,62,3,0,9,10,13,13,32,32,2,0,10,10,13,13,289,0,1,1,0,
		0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,
		1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,
		0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,
		1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
		0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,
		1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,
		0,0,69,1,0,0,0,1,71,1,0,0,0,3,73,1,0,0,0,5,77,1,0,0,0,7,83,1,0,0,0,9,90,
		1,0,0,0,11,97,1,0,0,0,13,102,1,0,0,0,15,107,1,0,0,0,17,114,1,0,0,0,19,
		117,1,0,0,0,21,122,1,0,0,0,23,126,1,0,0,0,25,132,1,0,0,0,27,140,1,0,0,
		0,29,165,1,0,0,0,31,167,1,0,0,0,33,174,1,0,0,0,35,183,1,0,0,0,37,194,1,
		0,0,0,39,200,1,0,0,0,41,202,1,0,0,0,43,204,1,0,0,0,45,216,1,0,0,0,47,218,
		1,0,0,0,49,221,1,0,0,0,51,224,1,0,0,0,53,226,1,0,0,0,55,228,1,0,0,0,57,
		230,1,0,0,0,59,232,1,0,0,0,61,234,1,0,0,0,63,237,1,0,0,0,65,243,1,0,0,
		0,67,254,1,0,0,0,69,268,1,0,0,0,71,72,5,126,0,0,72,2,1,0,0,0,73,74,5,105,
		0,0,74,75,5,110,0,0,75,76,5,116,0,0,76,4,1,0,0,0,77,78,5,102,0,0,78,79,
		5,108,0,0,79,80,5,111,0,0,80,81,5,97,0,0,81,82,5,116,0,0,82,6,1,0,0,0,
		83,84,5,100,0,0,84,85,5,111,0,0,85,86,5,117,0,0,86,87,5,98,0,0,87,88,5,
		108,0,0,88,89,5,101,0,0,89,8,1,0,0,0,90,91,5,115,0,0,91,92,5,116,0,0,92,
		93,5,114,0,0,93,94,5,105,0,0,94,95,5,110,0,0,95,96,5,103,0,0,96,10,1,0,
		0,0,97,98,5,118,0,0,98,99,5,111,0,0,99,100,5,105,0,0,100,101,5,100,0,0,
		101,12,1,0,0,0,102,103,5,98,0,0,103,104,5,111,0,0,104,105,5,111,0,0,105,
		106,5,108,0,0,106,14,1,0,0,0,107,108,5,114,0,0,108,109,5,101,0,0,109,110,
		5,116,0,0,110,111,5,117,0,0,111,112,5,114,0,0,112,113,5,110,0,0,113,16,
		1,0,0,0,114,115,5,105,0,0,115,116,5,102,0,0,116,18,1,0,0,0,117,118,5,101,
		0,0,118,119,5,108,0,0,119,120,5,115,0,0,120,121,5,101,0,0,121,20,1,0,0,
		0,122,123,5,102,0,0,123,124,5,111,0,0,124,125,5,114,0,0,125,22,1,0,0,0,
		126,127,5,119,0,0,127,128,5,104,0,0,128,129,5,105,0,0,129,130,5,108,0,
		0,130,131,5,101,0,0,131,24,1,0,0,0,132,133,5,115,0,0,133,134,5,116,0,0,
		134,135,5,114,0,0,135,136,5,117,0,0,136,137,5,99,0,0,137,138,5,116,0,0,
		138,26,1,0,0,0,139,141,7,0,0,0,140,139,1,0,0,0,140,141,1,0,0,0,141,143,
		1,0,0,0,142,144,7,1,0,0,143,142,1,0,0,0,144,145,1,0,0,0,145,143,1,0,0,
		0,145,146,1,0,0,0,146,153,1,0,0,0,147,149,5,46,0,0,148,150,7,1,0,0,149,
		148,1,0,0,0,150,151,1,0,0,0,151,149,1,0,0,0,151,152,1,0,0,0,152,154,1,
		0,0,0,153,147,1,0,0,0,153,154,1,0,0,0,154,28,1,0,0,0,155,156,5,116,0,0,
		156,157,5,114,0,0,157,158,5,117,0,0,158,166,5,101,0,0,159,160,5,102,0,
		0,160,161,5,97,0,0,161,162,5,108,0,0,162,163,5,115,0,0,163,166,5,101,0,
		0,164,166,2,48,49,0,165,155,1,0,0,0,165,159,1,0,0,0,165,164,1,0,0,0,166,
		30,1,0,0,0,167,171,7,2,0,0,168,170,7,3,0,0,169,168,1,0,0,0,170,173,1,0,
		0,0,171,169,1,0,0,0,171,172,1,0,0,0,172,32,1,0,0,0,173,171,1,0,0,0,174,
		178,5,34,0,0,175,177,9,0,0,0,176,175,1,0,0,0,177,180,1,0,0,0,178,179,1,
		0,0,0,178,176,1,0,0,0,179,181,1,0,0,0,180,178,1,0,0,0,181,182,5,34,0,0,
		182,34,1,0,0,0,183,184,7,4,0,0,184,36,1,0,0,0,185,195,7,5,0,0,186,187,
		5,60,0,0,187,195,5,61,0,0,188,189,5,62,0,0,189,195,5,61,0,0,190,191,5,
		61,0,0,191,195,5,61,0,0,192,193,5,33,0,0,193,195,5,61,0,0,194,185,1,0,
		0,0,194,186,1,0,0,0,194,188,1,0,0,0,194,190,1,0,0,0,194,192,1,0,0,0,195,
		38,1,0,0,0,196,197,5,38,0,0,197,201,5,38,0,0,198,199,5,124,0,0,199,201,
		5,124,0,0,200,196,1,0,0,0,200,198,1,0,0,0,201,40,1,0,0,0,202,203,5,33,
		0,0,203,42,1,0,0,0,204,205,5,61,0,0,205,44,1,0,0,0,206,207,5,43,0,0,207,
		217,5,61,0,0,208,209,5,45,0,0,209,217,5,61,0,0,210,211,5,42,0,0,211,217,
		5,61,0,0,212,213,5,47,0,0,213,217,5,61,0,0,214,215,5,37,0,0,215,217,5,
		61,0,0,216,206,1,0,0,0,216,208,1,0,0,0,216,210,1,0,0,0,216,212,1,0,0,0,
		216,214,1,0,0,0,217,46,1,0,0,0,218,219,5,43,0,0,219,220,5,43,0,0,220,48,
		1,0,0,0,221,222,5,45,0,0,222,223,5,45,0,0,223,50,1,0,0,0,224,225,5,40,
		0,0,225,52,1,0,0,0,226,227,5,41,0,0,227,54,1,0,0,0,228,229,5,123,0,0,229,
		56,1,0,0,0,230,231,5,125,0,0,231,58,1,0,0,0,232,233,5,59,0,0,233,60,1,
		0,0,0,234,235,5,44,0,0,235,62,1,0,0,0,236,238,7,6,0,0,237,236,1,0,0,0,
		238,239,1,0,0,0,239,237,1,0,0,0,239,240,1,0,0,0,240,241,1,0,0,0,241,242,
		6,31,0,0,242,64,1,0,0,0,243,244,5,47,0,0,244,245,5,47,0,0,245,249,1,0,
		0,0,246,248,8,7,0,0,247,246,1,0,0,0,248,251,1,0,0,0,249,247,1,0,0,0,249,
		250,1,0,0,0,250,252,1,0,0,0,251,249,1,0,0,0,252,253,6,32,0,0,253,66,1,
		0,0,0,254,255,5,47,0,0,255,256,5,42,0,0,256,260,1,0,0,0,257,259,9,0,0,
		0,258,257,1,0,0,0,259,262,1,0,0,0,260,261,1,0,0,0,260,258,1,0,0,0,261,
		263,1,0,0,0,262,260,1,0,0,0,263,264,5,42,0,0,264,265,5,47,0,0,265,266,
		1,0,0,0,266,267,6,33,0,0,267,68,1,0,0,0,268,269,9,0,0,0,269,70,1,0,0,0,
		14,0,140,145,151,153,165,171,178,194,200,216,239,249,260,1,6,0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
