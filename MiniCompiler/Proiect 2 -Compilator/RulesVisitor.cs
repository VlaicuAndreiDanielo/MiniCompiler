//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from c:/Computers/probleme C++/Proiect 2 -Compilator/Proiect 2 -Compilator/Rules.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete generic visitor for a parse tree produced
/// by <see cref="RulesParser"/>.
/// </summary>
/// <typeparam name="Result">The return type of the visit operation.</typeparam>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public interface IRulesVisitor<Result> : IParseTreeVisitor<Result> {
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.declaration"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDeclaration([NotNull] RulesParser.DeclarationContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.globalVariable"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitGlobalVariable([NotNull] RulesParser.GlobalVariableContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.program"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitProgram([NotNull] RulesParser.ProgramContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.increment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIncrement([NotNull] RulesParser.IncrementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.decrement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDecrement([NotNull] RulesParser.DecrementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.assignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitAssignment([NotNull] RulesParser.AssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.function"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunction([NotNull] RulesParser.FunctionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.parameters"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParameters([NotNull] RulesParser.ParametersContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.functionCall"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitFunctionCall([NotNull] RulesParser.FunctionCallContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.arguments"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArguments([NotNull] RulesParser.ArgumentsContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.structDefinition"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructDefinition([NotNull] RulesParser.StructDefinitionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.constructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitConstructor([NotNull] RulesParser.ConstructorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.destructor"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitDestructor([NotNull] RulesParser.DestructorContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.structMember"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStructMember([NotNull] RulesParser.StructMemberContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.statement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStatement([NotNull] RulesParser.StatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.compoundAssignment"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitCompoundAssignment([NotNull] RulesParser.CompoundAssignmentContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.ifStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIfStatement([NotNull] RulesParser.IfStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.forStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitForStatement([NotNull] RulesParser.ForStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.whileStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitWhileStatement([NotNull] RulesParser.WhileStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.returnStatement"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitReturnStatement([NotNull] RulesParser.ReturnStatementContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>RelationalExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitRelationalExpression([NotNull] RulesParser.RelationalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalExpression([NotNull] RulesParser.LogicalExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>BoolAssignmentExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitBoolAssignmentExpression([NotNull] RulesParser.BoolAssignmentExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ParenthesisExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitParenthesisExpression([NotNull] RulesParser.ParenthesisExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>StringExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitStringExpression([NotNull] RulesParser.StringExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>NumberExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitNumberExpression([NotNull] RulesParser.NumberExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>LogicalNegationExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitLogicalNegationExpression([NotNull] RulesParser.LogicalNegationExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>ArithmeticExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitArithmeticExpression([NotNull] RulesParser.ArithmeticExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by the <c>IdentifierExpression</c>
	/// labeled alternative in <see cref="RulesParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitIdentifierExpression([NotNull] RulesParser.IdentifierExpressionContext context);
	/// <summary>
	/// Visit a parse tree produced by <see cref="RulesParser.type"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	/// <return>The visitor result.</return>
	Result VisitType([NotNull] RulesParser.TypeContext context);
}
